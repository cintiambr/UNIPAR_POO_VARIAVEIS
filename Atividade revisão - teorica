1- É um paradigma da programação que é baseado no conceito de "objetos", estes que são instâncias de classes que representam entidades do mundo real ou conceitual e encobrem comportamentos e dados relacionados a essas entidades.
Existem 4 princípios fundamentais, estes sendo:
Encapsulamento: É o princípio de esconder os detalhes internos de um objeto e fornecer uma interface pública para interação com o objeto.
Abstração: A abstração é o princípio de identificar as características essenciais de um objeto ou classe e esconder os detalhes menos relevantes.
Heranças: Herança é o princípio de criar novas classes a partir de classes existentes.
Polimorfismo: É o princípio de usar uma única interface para representar diferentes tipos de objetos.

2- Algumas vantagens da POO sobre a programação procedural são: Modularidade, reuso de código, facilidade de manutenção e de expansão, melhor organização, polimorfismo, e suporte a padrões de design.

3- O encapsulamento é o princípio que envolve ocultar os detalhes internos de uma classe ou objeto, fornecendo uma interface pública para interação. Isso protege os dados e métodos internos de 
alterações ou acessos indevidos, garantindo a integridade dos dados. Em linguagens, ele é implementado usando modificadores de acesso, sendo eles:
-Público(public): acessível em qualquer parte do programa;
-Protegido(protected): acessível apenas dentro da classe ou suas subclasses;
-Privado(private): acessível apenas dentro da classe;

4- Em programação orientada a objetos, uma classe é uma definição ou modelo que especifica atributos e métodos para um tipo específico de objeto.
Um objeto é uma instância de uma classe, ou seja, uma ocorrência concreta de uma classe com seus próprios dados (atributos) e comportamentos (métodos).
A relação entre eles é que a classe define a estrutura e o comportamento que os objetos daquele tipo terão. Os objetos são criados a partir da classe e podem usar os atributos e métodos definidos pela classe.

5- Os construtores são métodos especiais que inicializam os atributos de um objeto quando ele é criado, garantindo que o objeto comece em um estado consistente.Os métodos são funções definidas dentro de uma classe que operam sobre 
os objetos daquela classe. Eles definem o comportamento dos objetos, controlam o acesso aos atributos e possibilitam a interação entre objetos, promovendo
 o encapsulamento e o reuso de código.

6- Os métodos estáticos são associados à classe em si e podem ser chamados diretamente pela classe sem a necessidade de criar um objeto. Eles não têm acesso aos atributos de instância.
Os métodos de instância estão associados a uma instância específica da classe e são chamados a partir de um objeto da classe. Eles podem acessar e modificar os atributos de instância.

7- Acoplamento: É o grau de dependência entre classes. Baixo acoplamento é importante porque facilita a manutenção e evolução do código, além de promover a reutilização.
Coesão: Refere-se ao grau em que os elementos de uma classe trabalham juntos para um propósito comum. Alta coesão torna as classes mais organizadas, fáceis de entender e manter.
Baixo acoplamento e alta coesão levam a sistemas mais robustos, flexíveis e fáceis de manter.

8- O método main é o ponto de entrada de um programa em linguagens como Java, C#, e C++. Ele inicia a execução do programa e geralmente tem uma assinatura específica reconhecida pelo ambiente de execução.
 Pode receber argumentos de linha de comando, permitindo personalizar a execução.
Ponto de entrada: O principal objetivo do método main é ser o ponto de entrada do programa. É onde a execução do código começa.
Execução do programa: Dentro do método main, o programa pode executar outras funções, criar objetos, e iniciar fluxos de controle.
Parâmetros: Em algumas linguagens, o método main pode receber argumentos de linha de comando, permitindo que o programa seja executado com diferentes parâmetros.
Terminologia: Geralmente, o método main é declarado com uma assinatura específica que o ambiente de execução reconhece, permitindo a inicialização do programa.

9- A passagem de parâmetros em métodos de uma classe ocorre de duas formas:
Passagem por Valor: É passada uma cópia do valor do argumento, então alterações dentro do método não afetam o argumento original. Usada geralmente para tipos primitivos.
Passagem por Referência: É passada uma referência ou ponteiro para o argumento, então alterações dentro do método afetam o argumento original. Usada para tipos de objeto.

10- 
-Público(public): acessível em qualquer parte do programa;
-Protegido(protected): acessível apenas dentro da classe ou suas subclasses;
-Privado(private): acessível apenas dentro da classe;

11- A palavra-chave this é importante em programação orientada a objetos e é utilizada para referenciar o objeto atual dentro de um método ou construtor de uma classe. Ela tem várias utilidades como: 
-Acesso a membros do objeto;
-Diferenciação de contexto;
-Encadeamento de métodos;
-Passagem de referência de objetos.
